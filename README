ActiveRecordProfiler
====================

ActiveRecordProfiler monkey-patches 
ActiveRecord::ConnectionAdapters::AbstractAdapter both to improve the 
standard SQL logging and to provide profiler-like tracking of SQL
statements generated by application code.

Each SQL log entry generated by ActiveRecord will have appended the 
filename, line number, and function name of the nearest calling 
application code. The information is determined by walking up the call
stack until a filename within the /app/ directory is found. If no such
filename can be found, the SQL will be logged with a location of 
'Non-application code'.

Additionally, the profiler will keep track of the total time spent by all
SQL calls coming from each calling location, as well as the number of time
that location accessed the database. Certain SQL calls not under the
direct control of the application are not counted in these statistics,
such as "SHOW FIELDS", "SET NAMES", "BEGIN", and "COMMIT" statements which
tend to skew the timing statistics and provide less useful information
about slow SQL queries.

Periodically, the profiler will dump its statistics out to a file and
restart all of its counters/timers. The output file is named for the time
and PID from which it was written, so that multiple processes can safely
write their output simultaneously.

Configuration
=============
Enable the profiler for given environments (default: ['development', 'staging'])
  ActiveRecordProfiler::Collector.profile_environments = %w( development )

Control the (approximate) frequency of statistics flushes (default: 1.hour)
  ActiveRecordProfiler::Collector.stats_flush_period = 1.hour

Directory where profile data is recorded (default: "#{RAILS_ROOT}/log/profiler_data")
  ActiveRecordProfiler::Collector.profile_dir = File.join(RAILS_ROOT, "log", "profiler_data")

Any SQL statements matching this pattern will not be tracked by the 
profiler output, though it will still appear in the enhanced SQL logging
(default: /^(SHOW FIELDS |SET SQL_AUTO_IS_NULL|SET NAMES |EXPLAIN |BEGIN|COMMIT)/)
  ActiveRecordProfiler::Collector.sql_ignore_pattern = /^SET /

If you don't want to use the JSON gem to store your profiler data, you can
use the FasterCSV gem instead, but due to field length constraints in 
FasterCSV's parsing code, some of your SQL may be truncated.
  ActiveRecordProfiler::Collector.storage_backend = :fastercsv



Copyright (c) 2009 ben@gist.com